#!/bin/bash

# This script is used to setup a Parse-serer and a MongoDB database. 

# Variables for new database (edit these as needed)
export MONGO_PASSWORD=""
export PARSE_APP_ID="fmd-md"
export PARSE_MASTER_KEY=""
export PARSE_PORT="4000"
export SERVER_IP=""
export MONGO_BIND_IP="0.0.0.0"
export MONGO_PORT="27017"
export CLASSES='["DatabasePruning", "Endpoints", "UserSession", "FollowUp"]'

# Variables for old database connection
export OLD_PARSE_APP_ID=""
export OLD_PARSE_PORT="4000"
export OLD_SERVER_IP=""


# Set non-interactive frontend for automatic handling of all prompts
export DEBIAN_FRONTEND=noninteractive

# Update System and Install Necessary Packages
apt-get update && apt-get upgrade -y -o Dpkg::Options::="--force-confold"
apt-get install -y -o Dpkg::Options::="--force-confold" git npm gnupg curl

# MongoDB Installation
wget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -
echo "deb [arch=amd64,arm64] http://repo.mongodb.org/apt/debian $(lsb_release -cs)/mongodb-org/7.0 main" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
apt-get update
apt-get install -y -o Dpkg::Options::="--force-confold" mongodb-org

# Start MongoDB and Configure Autostart
sudo systemctl start mongod
sudo systemctl enable mongod

# Non-blocking status check
if systemctl is-active --quiet mongod; then
    echo "MongoDB is active and running."
else
    echo "Failed to start MongoDB."
    exit 1
fi

# MongoDB Configuration for Remote Connections and Security
cat > /etc/mongod.conf <<EOF
# Security settings
security:
  authorization: enabled

# Network-related settings
net:
  port: $MONGO_PORT
  bindIp: $MONGO_BIND_IP

# Storage settings
storage:
  dbPath: /var/lib/mongodb

# System log settings
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log
EOF

# Ensure the MongoDB data and log directories exist and have the correct permissions
sudo mkdir -p /var/lib/mongodb
sudo mkdir -p /var/log/mongodb
sudo chown -R mongodb:mongodb /var/lib/mongodb
sudo chown -R mongodb:mongodb /var/log/mongodb

# Restart MongoDB to apply the new configuration
sudo systemctl restart mongod

# Check if MongoDB is ready before continuing
while ! echo 'exit' | mongosh --quiet; do
    echo "Waiting for MongoDB to initialize..."
    sleep 1
done

# Adding MongoDB Admin User
mongosh <<EOF
use admin
db.createUser({
  user: 'admin',
  pwd: '$MONGO_PASSWORD',
  roles: [
    { role: 'userAdminAnyDatabase', db: 'admin' },
    { role: 'readWriteAnyDatabase', db: 'admin' },
    { role: 'dbAdminAnyDatabase', db: 'admin' }
  ]
})
EOF

# Adding FMD Database
mongosh <<EOF
use admin
db.auth('admin', '$MONGO_PASSWORD')

use FMD
db.createUser({
  user: 'fmd_admin',
  pwd: '$MONGO_PASSWORD',
  roles: [
    { role: 'dbOwner', db: 'FMD' }
  ]
})
EOF

# PM2 Installation
npm install pm2 -g

# Install UFW and Allow Port for Parse Server
sudo apt install ufw
sudo ufw allow ssh
sudo ufw allow $PARSE_PORT
sudo ufw allow $MONGO_PORT


# Automatically respond with "yes" to the UFW enable prompt
echo "y" | sudo ufw enable


# Install Parse Server
npm install -g parse-server mongodb-runner

# Environment Variables for Parse Server
export PARSE_SERVER_ALLOW_CLIENT_CLASS_CREATION=true

# Start Parse Server with PM2

echo "Starting Parse Server with Master Key: $PARSE_MASTER_KEY"
pm2 start parse-server -- --appId $PARSE_APP_ID --masterKey $PARSE_MASTER_KEY --databaseURI mongodb://fmd_admin:$MONGO_PASSWORD@$SERVER_IP:$MONGO_PORT/FMD --port $PARSE_PORT --allowExpiredAuthDataToken true --encodeParseObjectInCloudFunction true

pm2 save
pm2 startup


# Ensure PM2 restarts on reboot
sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u $(whoami) --hp $(echo $HOME)


# Ensure the Parse JavaScript SDK and Axios is installed
npm install parse
npm install axios
npm install winston


# Create migration script with logging
echo "Creating migration script..."
cat << 'EOF' > migrate_data.js
const Parse = require('parse/node');
const axios = require('axios');
const { createLogger, format, transports } = require('winston');

const logger = createLogger({
    format: format.combine(
        format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
        format.printf(({ timestamp, level, message }) => `${timestamp} ${level.toUpperCase()}: ${message}`)
    ),
    transports: [
        new transports.File({ filename: 'dataMigration.log' })
    ]
});

Parse.initialize(process.env.PARSE_APP_ID, '', process.env.PARSE_MASTER_KEY);
Parse.serverURL = `http://${process.env.SERVER_IP}:${process.env.PARSE_PORT}/parse`;

async function migrateData(classes) {
    for (const className of classes) {
        logger.info(`Migrating class ${className}...`);

        const oldParseURL = `http://${process.env.OLD_SERVER_IP}:${process.env.OLD_PARSE_PORT}/parse/classes/${className}`;

        let skip = 0; // Track how many records have been fetched
        const limit = 100; // Define the limit per request
        let hasMoreData = true;

        while (hasMoreData) {
            logger.info(`Fetching data from: ${oldParseURL} with skip ${skip} and limit ${limit}`);

            try {
                const response = await axios.get(`${oldParseURL}?skip=${skip}&limit=${limit}`, {
                    headers: {
                        'X-Parse-Application-Id': process.env.OLD_PARSE_APP_ID,
                    },
                });

                if (response.data && response.data.results) {
                    const records = response.data.results;

                    for (const record of records) {
                        const NewClass = Parse.Object.extend(className);
                        const newObj = new NewClass();

                        for (const key in record) {
                            if (!["objectId", "createdAt", "updatedAt", "className"].includes(key)) {
                                newObj.set(key, record[key]);
                            }
                        }

                        await newObj.save();
                    }

                    logger.info(`Migrated ${records.length} records for class ${className}.`);

                    // Check if there are more records to fetch
                    if (records.length < limit) {
                        hasMoreData = false;
                    } else {
                        skip += limit; // Move the skip forward
                    }
                } else {
                    logger.info(`No data found for class ${className}.`);
                    hasMoreData = false;
                }
            } catch (error) {
                logger.error(`Error migrating class ${className}: ${error.message}`);
                hasMoreData = false; // Stop in case of an error
            }
        }
    }
}

migrateData(process.argv.slice(2)).catch(error => logger.error(`Unhandled Error: ${error.message}`));
EOF

# Convert CLASSES to a space-separated string
classes=$(echo $CLASSES | sed 's/\[//; s/\]//; s/,/ /g; s/\"//g')

# Run the script passing in the classes
echo "Running migration"
node migrate_data.js $classes > dataMigration.log 2>&1
echo "Migration complete"

# Finish setup and close down class creation

export PARSE_SERVER_ALLOW_CLIENT_CLASS_CREATION=false
pm2 restart parse-server --update-env

pm2 save

# Ensure PM2 restarts on reboot
sudo env PATH=$PATH:/usr/bin pm2 startup systemd -u $(whoami) --hp $(echo $HOME)

# Modify UFW rules to close mongo port after changes are done
sudo ufw delete allow $MONGO_PORT
sudo ufw reload

echo "Setup and data migration completed."